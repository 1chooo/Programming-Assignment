Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/22/22 03:17:08
mian.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; 宣告函式
				decToStr          PROTO, decNum:WORD, decStr:BYTE
				printNum          PROTO, decNum:WORD, decStr:BYTE, xyPosInit:COORD

				printGreenLine    PROTO, xyPosInit:COORD
				printBullet       PROTO, xyPosInit:COORD
				bulletClear       PROTO, xyPosInit:COORD
				printBogy         PROTO, xyPosInit:COORD
				bogyClear         PROTO, xyPosInit:COORD
				printTank         PROTO, xyPosInit:COORD
				tankClear         PROTO, xyPosInit:COORD

				initialLevel      PROTO
				printGameStage    PROTO
				printBar          PROTO
				printEnd     PROTO
				printStartScene   PROTO

				; ebx公約 -> 用來存狀態
				; ebx = 1 玩遊戲
				; ebx = 2 暫停     -> 後來沒用到
				; ebx = 3 結算畫面
				; ebx = 4 離開程式

 00000000			.data
				; 變數們 BYTE 1, WORD 2, DWORD 4
 00000000 00000000			consoleHandle  DWORD ?
 00000004 00000000			cells_Written  DWORD ?
					
					; 設定視窗標題&視窗大小設定
 00000008 48 75 61 20 54		windowTitleStr BYTE "Hua Tank V.S Bogy", 0
	   61 6E 6B 20 56
	   2E 53 20 42 6F
	   67 79 00
 0000001A 0000 0000 007D		windowBound SMALL_RECT <0, 0, 125, 25>
	   0019
					
					; 所有東西的初始座標
 00000022 0000 0000			xyPos COORD <?,?> ; 印其他東西用的

 00000026 0007 000F			xyPosTank COORD <7,15>

					; 21顆子彈的初始座標
 0000002A 000F				xPos15 WORD 15 ; 發射完之後要回來的地方
 0000002C 0000 0006 0000		xyPosBullet COORD <?,6> , <?,7>,  <?,8> , <?,9> , <?,10>,
	   0007 0000 0008
	   0000 0009 0000
	   000A 0000 000B
	   0000 000C 0000
	   000D 0000 000E
	   0000 000F 0000
	   0010 0000 0011
	   0000 0012 0000
	   0013 0000 0014
	   0000 0015 0000
	   0016 0000 0017
	   0000 0018 0000
	   0019 0000 001A
									  <?,11>, <?,12>, <?,13>, <?,14>, <?,15>,
									  <?,16>, <?,17>, <?,18>, <?,19>, <?,20>,
									  <?,21>, <?,22>, <?,23>, <?,24>, <?,25>, <?,26>

 00000080  00000014 [			bulletIsWork WORD 20 DUP(0) ; 代表子彈的狀態 1 代表發射, 0代表沒動
	    0000
	   ]

 000000A8 0000 0005 0000		xyPosBogy COORD <?,5>, <?,9>, <?,13>, <?,17>, <?,21>, <?,25>
	   0009 0000 000D
	   0000 0011 0000
	   0015 0000 0019
 000000C0 0098 007B 006E		xPosBogyLevel1 WORD 152, 123, 110, 116, 131, 136
	   0074 0083 0088
 000000CC 00E7 0098 007C		xPosBogyLevel2 WORD 231, 152, 124, 142, 134, 210
	   008E 0086 00D2
 000000D8 00BA 007F 0086		xPosBogyLevel3 WORD 186, 127, 134, 132, 123, 165
	   0084 007B 00A5
 000000E4 0099 00A5 008E		xPosBogyLevel4 WORD 153, 165, 142, 120, 152, 163
	   0078 0098 00A3
 000000F0 008E 007B 00A3		xPosBogyLevel5 WORD 142, 123, 163, 134, 126, 146
	   0086 007E 0092

					; 開始畫面 長度108, 行數6
 000000FC 20 5F 5F 5F 5F		startStr BYTE " _________    _      ____  _____ ___  ____   ____   ____  ______      ______     ___      ______ ____  ____ "
	   5F 5F 5F 5F 5F
	   20 20 20 20 5F
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 20 20
	   5F 5F 5F 5F 20
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20
 00000168  7C 20 20 5F 20				 BYTE "|  _   _  |  / \    |_   \|_   _|_  ||_  _| |_  _| |_  _|/ ____ \    |_   _ \  .'   `.  /  ___  |_  _||_  _|"
	   20 20 5F 20 20
	   7C 20 20 2F 20
	   5C 20 20 20 20
	   7C 5F 20 20 20
	   5C 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 7C 7C 5F 20
	   20 5F 7C 20 7C
	   5F 20 20 5F 7C
	   20 7C 5F 20 20
	   5F 7C 2F 20 5F
	   5F 5F 5F 20 5C
	   20 20 20 20 7C
	   5F 20 20 20 5F
	   20 5C 20 20 2E
	   27 20 20 20 60
	   2E 20 20 2F 20
	   20 5F 5F 5F 20
	   20 7C 5F 20 20
	   5F 7C 7C 5F 20
	   20 5F 7C
 000001D4  7C 5F 2F 20 7C				 BYTE "|_/ | | \_| / A \     |   \ | |   | |_/ /     \ \   / / | (___ \_|     | |_) |/  .-.  \/  /   \_| \ \  / /  " 
	   20 7C 20 5C 5F
	   7C 20 2F 20 41
	   20 5C 20 20 20
	   20 20 7C 20 20
	   20 5C 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5F 2F 20
	   2F 20 20 20 20
	   20 5C 20 5C 20
	   20 20 2F 20 2F
	   20 7C 20 28 5F
	   5F 5F 20 5C 5F
	   7C 20 20 20 20
	   20 7C 20 7C 5F
	   29 20 7C 2F 20
	   20 2E 2D 2E 20
	   20 5C 2F 20 20
	   2F 20 20 20 5C
	   5F 7C 20 5C 20
	   5C 20 20 2F 20
	   2F 20 20
 00000240  20 20 20 20 7C				 BYTE "    | |    / ___ \    | |\ \| |   |  __ \      \ \ / /   _.____`.      |  __'.| |   | || |   ____  \ \/ /   " 
	   20 7C 20 20 20
	   20 2F 20 5F 5F
	   5F 20 5C 20 20
	   20 20 7C 20 7C
	   5C 20 5C 7C 20
	   7C 20 20 20 7C
	   20 20 5F 5F 20
	   5C 20 20 20 20
	   20 20 5C 20 5C
	   20 2F 20 2F 20
	   20 20 5F 2E 5F
	   5F 5F 5F 60 2E
	   20 20 20 20 20
	   20 7C 20 20 5F
	   5F 27 2E 7C 20
	   7C 20 20 20 7C
	   20 7C 7C 20 7C
	   20 20 20 5F 5F
	   5F 5F 20 20 5C
	   20 5C 2F 20 2F
	   20 20 20
 000002AC  20 20 20 5F 7C				 BYTE "   _| |_ _/ /   \ \_ _| |_\   |_ _| |  \ \_     \ ' /_  | \____) | _  _| |__) \  `-'  /\  \___]  | _|  |_   " 
	   20 7C 5F 20 5F
	   2F 20 2F 20 20
	   20 5C 20 5C 5F
	   20 5F 7C 20 7C
	   5F 5C 20 20 20
	   7C 5F 20 5F 7C
	   20 7C 20 20 5C
	   20 5C 5F 20 20
	   20 20 20 5C 20
	   27 20 2F 5F 20
	   20 7C 20 5C 5F
	   5F 5F 5F 29 20
	   7C 20 5F 20 20
	   5F 7C 20 7C 5F
	   5F 29 20 5C 20
	   20 60 2D 27 20
	   20 2F 5C 20 20
	   5C 5F 5F 5F 5D
	   20 20 7C 20 5F
	   7C 20 20 7C 5F
	   20 20 20
 00000318  20 20 7C 5F 5F				 BYTE "  |_____|____| |____|_____|\____|____||____|     \_/(_)  \______.'(_)|_______/ `.___.'  `._____.' |______|  "
	   5F 5F 5F 7C 5F
	   5F 5F 5F 7C 20
	   7C 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 7C 5C 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 7C 7C 5F
	   5F 5F 5F 7C 20
	   20 20 20 20 5C
	   5F 2F 28 5F 29
	   20 20 5C 5F 5F
	   5F 5F 5F 5F 2E
	   27 28 5F 29 7C
	   5F 5F 5F 5F 5F
	   5F 5F 2F 20 60
	   2E 5F 5F 5F 2E
	   27 20 20 60 2E
	   5F 5F 5F 5F 5F
	   2E 27 20 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 20
					
 00000384  0000002C [			startColor WORD 44 DUP(0Ah), 25 DUP(0fh), 39 DUP(0Bh) ;標題顏色
	    000A
	   ]
	   00000019 [
	    000F
	   ]
	   00000027 [
	    000B
	   ]

					; 歡迎坦克 長度24, 行數7
 0000045C 20 20 20 20 20		startTank BYTE "       \                "
	   20 20 5C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20
 00000474  20 20 20 20 20				  BYTE "       _\______         "
	   20 20 5F 5C 5F
	   5F 5F 5F 5F 5F
	   20 20 20 20 20
	   20 20 20 20
 0000048C  20 20 20 20 20				  BYTE "      /        \=======D"
	   20 2F 20 20 20
	   20 20 20 20 20
	   5C 3D 3D 3D 3D
	   3D 3D 3D 44
 000004A4  20 5F 5F 5F 5F				  BYTE " ____|_HUA_TANK_\_____  "
	   7C 5F 48 55 41
	   5F 54 41 4E 4B
	   5F 5C 5F 5F 5F
	   5F 5F 20 20
 000004BC  2F 20 5F 5F 5F				  BYTE "/ ___WHERE_ARE_YOU?__ \ "
	   57 48 45 52 45
	   5F 41 52 45 5F
	   59 4F 55 3F 5F
	   5F 20 5C 20
 000004D4  5C 2F 20 5F 3D				  BYTE "\/ _===============_ \/ "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 5F
	   20 5C 2F 20
 000004EC  20 20 5C 2D 3D				  BYTE "  \-===============-/   "
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 2D
	   2F 20 20 20
 00000504  00000018 [			startTankColor WORD 24 DUP(0Ah) ; 歡迎坦克顏色
	    000A
	   ]

					; 歡迎BOGY 長度 7,行數 5
 00000534 20 28 5C 5F 2F		startBogy BYTE " (\_/) "
	   29 20
 0000053B  20 7C 4F 76 4F				  BYTE " |OvO| "
	   7C 20
 00000542  2F 20 3D 3D 3D				  BYTE "/ === \"
	   20 5C
 00000549  5C 7C 20 58 20				  BYTE "\| X |/"
	   7C 2F
 00000550  20 7C 5F 7C 5F				  BYTE " |_|_| "
	   7C 20
 00000557  00000007 [			startBogyColor WORD 7 DUP(0Bh) ; 歡迎BOGY顏色
	    000B
	   ]

					; 遊戲規則 長度 65 行數16 1, 8, 13 黃色
 00000565 2A 2A 2A 2A 2A		gameIntro BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
 000005A6  20 20 20 20 20	              BYTE "                       Game Introduction:                        "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 47 61
	   6D 65 20 49 6E
	   74 72 6F 64 75
	   63 74 69 6F 6E
	   3A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000005E7  20 20 20 20 20	              BYTE "             Control the Hua Tank to kill the Bogy.              "
	   20 20 20 20 20
	   20 20 20 43 6F
	   6E 74 72 6F 6C
	   20 74 68 65 20
	   48 75 61 20 54
	   61 6E 6B 20 74
	   6F 20 6B 69 6C
	   6C 20 74 68 65
	   20 42 6F 67 79
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000628  20 20 20 20 20	              BYTE "              Don't let Bogy cross the green line,               "
	   20 20 20 20 20
	   20 20 20 20 44
	   6F 6E 27 74 20
	   6C 65 74 20 42
	   6F 67 79 20 63
	   72 6F 73 73 20
	   74 68 65 20 67
	   72 65 65 6E 20
	   6C 69 6E 65 2C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000669  20 20 20 20 20				  BYTE "                 or your life will shock down!!                  "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 6F 72 20
	   79 6F 75 72 20
	   6C 69 66 65 20
	   77 69 6C 6C 20
	   73 68 6F 63 6B
	   20 64 6F 77 6E
	   21 21 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000006AA  20 20 20 53 74	              BYTE "   Start with 10 lives, once the live reaches zero, you lose!!   "
	   61 72 74 20 77
	   69 74 68 20 31
	   30 20 6C 69 76
	   65 73 2C 20 6F
	   6E 63 65 20 74
	   68 65 20 6C 69
	   76 65 20 72 65
	   61 63 68 65 73
	   20 7A 65 72 6F
	   2C 20 79 6F 75
	   20 6C 6F 73 65
	   21 21 20 20 20
 000006EB  20 20 20 20 20	              BYTE "      Kill the last monsters, if you still alive, you win!!      "
	   20 4B 69 6C 6C
	   20 74 68 65 20
	   6C 61 73 74 20
	   6D 6F 6E 73 74
	   65 72 73 2C 20
	   69 66 20 79 6F
	   75 20 73 74 69
	   6C 6C 20 61 6C
	   69 76 65 2C 20
	   79 6F 75 20 77
	   69 6E 21 21 20
	   20 20 20 20 20
 0000072C  20 20 20 20 20	              BYTE "                                                                 "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 0000076D  20 20 20 20 20	              BYTE "                    How to control the tank:                     "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   48 6F 77 20 74
	   6F 20 63 6F 6E
	   74 72 6F 6C 20
	   74 68 65 20 74
	   61 6E 6B 3A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000007AE  20 20 20 20 20	              BYTE "                + press 'up'    to move up                       "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   75 70 27 20 20
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   75 70 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000007EF  20 20 20 20 20	              BYTE "                + press 'down'  to move down                     "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   64 6F 77 6E 27
	   20 20 74 6F 20
	   6D 6F 76 65 20
	   64 6F 77 6E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000830  20 20 20 20 20	              BYTE "                + press 'right' to fire bullet                   "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   72 69 67 68 74
	   27 20 74 6F 20
	   66 69 72 65 20
	   62 75 6C 6C 65
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000871  20 20 20 20 20	              BYTE "                                                                 "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000008B2  20 20 20 20 20	              BYTE "                          How to play:                           "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 48 6F 77 20
	   74 6F 20 70 6C
	   61 79 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000008F3  20 20 20 20 20	              BYTE "                + press 'space' to start game                    "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   73 70 61 63 65
	   27 20 74 6F 20
	   73 74 61 72 74
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000934  20 20 20 20 20	              BYTE "                + press 'P'     to pause game                    "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 20 70 72
	   65 73 73 20 27
	   50 27 20 20 20
	   20 20 74 6F 20
	   70 61 75 73 65
	   20 67 61 6D 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000975  2A 2A 2A 2A 2A	              BYTE "*****************************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
 000009B6  00000041 [			gameIntroColor WORD 65 DUP(0Eh)
	    000E
	   ]

					; 開始畫面&結算畫面的提示字
 00000A38 50 72 65 73 73		enterMsg  BYTE "Press 'E' to enter",0
	   20 27 45 27 20
	   74 6F 20 65 6E
	   74 65 72 00
 00000A4B 50 72 65 73 73		leaveMsg  BYTE "Press 'L' to leave",0
	   20 27 4C 27 20
	   74 6F 20 6C 65
	   61 76 65 00
 00000A5E 50 72 65 73 73		restart   BYTE "Press 'R' to restart",0
	   20 27 52 27 20
	   74 6F 20 72 65
	   73 74 61 72 74
	   00
 00000A73 50 72 65 73 73		nextLevel BYTE "Press 'N' to next level",0
	   20 27 4E 27 20
	   74 6F 20 6E 65
	   78 74 20 6C 65
	   76 65 6C 00
 00000A8B 54 68 65 20 64		finalMsg  BYTE "The day is saved, thanks to the Powerful Hua Tank!",0
	   61 79 20 69 73
	   20 73 61 76 65
	   64 2C 20 74 68
	   61 6E 6B 73 20
	   74 6F 20 74 68
	   65 20 50 6F 77
	   65 72 66 75 6C
	   20 48 75 61 20
	   54 61 6E 6B 21
	   00

 00000ABE  00000032 [			finalColor WORD 50 DUP(0Ah) ; finalMsg的顏色
	    000A
	   ]

					; 小坦克 長度 8, 行數 3
 00000B22 20 20 5F 5F 20		gameTank  BYTE "  __    "
	   20 20 20
 00000B2A  20 48 75 61 5C				  BYTE " Hua\==D"
	   3D 3D 44
 00000B32  28 54 61 6E 6B				  BYTE "(Tank)  "
	   29 20 20
 00000B3A  00000008 [			clearTank BYTE 8 DUP(' ')
	    20
	   ]
 00000B42  00000008 [			tankColor WORD 8 DUP(0Ah) ; 小坦克顏色
	    000A
	   ]

					; 小BOGY 長度 5, 行數 3
 00000B52 28 5C 5F 2F 29		gameBogy  BYTE "(\_/)"
 00000B57  7C 4F 76 4F 7C				  BYTE "|OvO|"
 00000B5C  7C 5F 7C 5F 7C				  BYTE "|_|_|"
 00000B61  00000005 [			clearBogy BYTE 5 DUP(' ')
	    20
	   ]
 00000B66  00000005 [			gameBogyColor WORD 5 DUP(0Eh), 5 DUP(0Bh), 5 DUP(0Dh)
	    000E
	   ]
	   00000005 [
	    000B
	   ]
	   00000005 [
	    000D
	   ]

					; 子彈
 00000B84 4E 4F 57 4F 52		bullet BYTE "NOWORK",0
	   4B 00
 00000B8B  00000006 [			clearBullet BYTE 6 DUP(' ')
	    20
	   ]
 00000B91  00000006 [			bulletColor WORD 6 DUP(0Fh) ; 子彈顏色
	    000F
	   ]

					; 禁忌的綠色線
 00000B9D 7C 00				line BYTE "|",0
 00000B9F 000A				greenColor WORD 0Ah

 00000BA1 4C 65 76 65 6C		level BYTE "Level: ",0
	   3A 20 00
 00000BA9 53 74 61 74 65		state BYTE "State: ",0
	   3A 20 00
 00000BB1 53 63 6F 72 65		score BYTE "Score: ",0
	   3A 20 00
 00000BB9 4C 69 76 65 73		lives BYTE "Lives: ",0
	   3A 20 00
 00000BC1 42 6F 67 69 65		bogys BYTE "Bogies:",0
	   73 3A 00

 00000BC9  00000004 [			numStr BYTE 4 DUP(?)
	    00
	   ]

 00000BCD 50 61 75 73 65		paused BYTE "Paused ",0
	   64 20 00
 00000BD5 50 6C 61 79 69		playing BYTE "Playing",0
	   6E 67 00

 00000BDD 0000				scoreNumInLevel WORD ?
 00000BDF 0000				livesNumInLevel WORD ?

 00000BE1 0001				levelNum WORD 1
 00000BE3 0000				scoreNum WORD 0
 00000BE5 000A				livesNum WORD 10
 00000BE7 0000				bogysNum WORD ?

					; 遊戲的框框
 00000BE9  0000006E [			gameBgTB BYTE 110 DUP("*"),0 ;上下
	    2A
	   ] 00
 00000C58 2A				gameBgM  BYTE "*", 108 DUP(" "), "*",0 ; 中間的
	   0000006C [
	    20
	   ] 2A 00

 00000CC7 20 20 5F 5F 5F		winStr  BYTE "  ____      ____ _____ ____  _____  "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 20
	   20
 00000CEB  20 7C 5F 20 20			    BYTE " |_  _|    |_  _|_   _|_   \|_   _| "
	   5F 7C 20 20 20
	   20 7C 5F 20 20
	   5F 7C 5F 20 20
	   20 5F 7C 5F 20
	   20 20 5C 7C 5F
	   20 20 20 5F 7C
	   20
 00000D0F  20 20 20 5C 20			    BYTE "   \ \  /\  / /   | |   |   \ | |   "
	   5C 20 20 2F 5C
	   20 20 2F 20 2F
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 20 20 5C 20
	   7C 20 7C 20 20
	   20
 00000D33  20 20 20 20 5C			    BYTE "    \ \/  \/ /    | |   | |\ \| |   "
	   20 5C 2F 20 20
	   5C 2F 20 2F 20
	   20 20 20 7C 20
	   7C 20 20 20 7C
	   20 7C 5C 20 5C
	   7C 20 7C 20 20
	   20
 00000D57  20 20 20 20 20			    BYTE "     \  /\  /    _| |_ _| |_\   |_  "
	   5C 20 20 2F 5C
	   20 20 2F 20 20
	   20 20 5F 7C 20
	   7C 5F 20 5F 7C
	   20 7C 5F 5C 20
	   20 20 7C 5F 20
	   20
 00000D7B  20 20 20 20 20			    BYTE "      \/  \/    |_____|_____|\____| "
	   20 5C 2F 20 20
	   5C 2F 20 20 20
	   20 7C 5F 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 5F 7C 5C
	   5F 5F 5F 5F 7C
	   20
 00000D9F  00000024 [			winColor WORD 36 DUP(0Ah)
	    000A
	   ]
					
 00000DE7 20 5F 5F 5F 5F		loseStr BYTE " _____      ___    ______  ________ "
	   5F 20 20 20 20
	   20 20 5F 5F 5F
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20
 00000E0B  7C 5F 20 20 20				BYTE "|_   _|   .'   `..' ____ \|_   __  |"
	   5F 7C 20 20 20
	   2E 27 20 20 20
	   60 2E 2E 27 20
	   5F 5F 5F 5F 20
	   5C 7C 5F 20 20
	   20 5F 5F 20 20
	   7C
 00000E2F  20 20 7C 20 7C				BYTE "  | |    /  .-.  | (____\_| | |_ \_|"	
	   20 20 20 20 2F
	   20 20 2E 2D 2E
	   20 20 7C 20 28
	   5F 5F 5F 5F 5C
	   5F 7C 20 7C 20
	   7C 5F 20 5C 5F
	   7C
 00000E53  20 20 7C 20 7C				BYTE "  | |   _| |   | |_.____ \  |  _| _ "
	   20 20 20 5F 7C
	   20 7C 20 20 20
	   7C 20 7C 5F 2E
	   5F 5F 5F 5F 20
	   5C 20 20 7C 20
	   20 5F 7C 20 5F
	   20
 00000E77  20 5F 7C 20 7C				BYTE " _| |__/ \  `-'  / \____) \_| |__/ |"
	   5F 5F 2F 20 5C
	   20 20 60 2D 27
	   20 20 2F 20 5C
	   5F 5F 5F 5F 29
	   20 5C 5F 7C 20
	   7C 5F 5F 2F 20
	   7C
 00000E9B  7C 5F 5F 5F 5F				BYTE "|________|`.___.' \_______/________|"
	   5F 5F 5F 5F 7C
	   60 2E 5F 5F 5F
	   2E 27 20 5C 5F
	   5F 5F 5F 5F 5F
	   5F 2F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C
 00000EBF  00000024 [			loseColor WORD 36 DUP(0Bh)
	    000B
	   ]

 00000000			.code
 00000000			main PROC
					; get consoleHandle
					INVOKE GetstdHandle, STD_OUTPUT_HANDLE
 00000007  A3 00000000 R		mov consoleHandle, eax
					; 設定視窗標題
					INVOKE SetConsoleTitle, ADDR windowTitleStr
					; 設定視窗大小
					INVOKE SetConsoleWindowInfo,
						consoleHandle,
						TRUE,
						ADDR windowBound

 00000028			WelcomeScene:
					INVOKE printStartScene
					
					; 判斷 ebx 的狀態
 0000002D			CheckEbx:
					.IF ebx == 3 ; 結算畫面
 00000032  E8 00000000 E			call Clrscr
						INVOKE printEnd
					.ENDIF
					.IF ebx == 4 ; 結束遊戲
 00000041  E8 00000000 E			call Clrscr
 00000046  E9 0000032B				jmp ExitProgram
					.ENDIF
					.IF ebx == 1 ; 開始遊戲
						INVOKE initialLevel
						INVOKE printGameStage
						INVOKE printBar
					.ENDIF

 0000005F			GameLoop:
					; 印狀態列&禁忌的綠線
					INVOKE printBar
					INVOKE printGreenLine, xyPos

					; 印坦克
					INVOKE printTank, xyPosTank

					; 確認子彈是否有需要印
 0000007A  B9 00000015			mov ecx, 21
 0000007F  BE 00000000			mov esi, 0
 00000084  BA 00000000			mov edx, 0
 00000089			CheckBulletNeedToPrint:
					.IF [bulletIsWork + esi] == 1
						INVOKE printBullet, [xyPosBullet + edx]
					.ENDIF
 0000009E  83 C6 02			add esi, 2
 000000A1  83 C2 04			add edx, 4
 000000A4  E2 E3			loop CheckBulletNeedToPrint

					; 確認Bogy需不需要印
 000000A6  B9 00000006			mov ecx, 6
 000000AB  BE 00000000			mov esi, 0
 000000B0			CheckBogyNeedToPrint:
					.IF [xyPosBogy + esi].x < 107
						INVOKE printBogy, [xyPosBogy + esi]
					.ENDIF
 000000C5  83 C6 04			add esi, 4
 000000C8  E2 E6			loop CheckBogyNeedToPrint

					; 確認鍵盤輸入(坦克移動&暫停)
 000000CA			CheckKeyboard:
 000000CA  E8 00000000 E		call ReadKey
					.IF ax == 1970h ; 暫停
 000000D5  66| C7 05				mov xyPos.x, 36
	   00000022 R
	   0024
 000000DE  66| C7 05				mov xyPos.y, 2
	   00000024 R
	   0002
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR paused,
							SIZEOF paused,
							xyPos,
							ADDR cells_Written
 00000104			ToPause:
 00000104  E8 00000000 E			call ReadKey
						.IF ax == 3920h
							INVOKE WriteConsoleOutputCharacter,
								consoleHandle,
								ADDR playing,
								SIZEOF playing,
								xyPos,
								ADDR cells_Written
 0000012C  EB 02					jmp BackToGame
						.ENDIF
 0000012E  EB D4				jmp ToPause
					.ENDIF
 00000130			BackToGame:
					.IF ax == 4800h ; 往上
						INVOKE tankClear, xyPosTank
 00000141  66| 83 2D				sub xyPosTank.y, 2
	   00000028 R 02
						.IF xyPosTank.y < 5
 00000153  66| C7 05					mov xyPosTank.y, 5
	   00000028 R
	   0005
						.ENDIF
					.ENDIF
					.IF ax == 5000h ; 往下
						INVOKE tankClear, xyPosTank
 0000016D  66| 83 05				add xyPosTank.y, 2
	   00000028 R 02
						.IF xyPosTank.y > 25
 0000017F  66| C7 05					mov xyPosTank.y, 25
	   00000028 R
	   0019
						.ENDIF
					.ENDIF
					.IF ax == 4D00h ; 發射子彈
 0000018E  66| A1				mov ax, xyPosTank.y
	   00000028 R
 00000194  66| 83 E8 05				sub ax, 5
 00000198  66| BA 0002				mov dx, 2
 0000019C  66| F7 E2				mul dx
 0000019F  66| C7 80				mov [bulletIsWork + eax], 1
	   00000080 R
	   0001
					.ENDIF
					
					; 延遲一下讓東西能留在畫面上
 000001A8  B8 00000096			mov eax, 150
 000001AD  E8 00000000 E		call Delay

					; 判斷Bogy是否需要消失
 000001B2  B9 00000006			mov ecx, 6
 000001B7  BE 00000000			mov esi, 0
 000001BC  BA 00000000			mov edx, 0
 000001C1			CheckBogyNeedToClear:
					.IF [xyPosBogy + esi].x < 107
						INVOKE bogyClear, [xyPosBogy + esi]
					.ENDIF

					; 給bogy新的座標
					.IF levelNum == 1
 000001E0  66| B8 0001				mov ax, 1
					.ENDIF
					.IF levelNum == 2
 000001EE  B8 00000002				mov eax, 2
 000001F3  E8 00000000 E			call RandomRange
 000001F8  40					inc eax
					.ENDIF
					.IF levelNum == 3
 00000203  B8 00000004				mov eax, 4
 00000208  E8 00000000 E			call RandomRange
					.ENDIF
					.IF levelNum == 4
 00000217  B8 00000006				mov eax, 6
 0000021C  E8 00000000 E			call RandomRange
					.ENDIF
					.IF levelNum == 5
 0000022B  B8 00000008				mov eax, 8
 00000230  E8 00000000 E			call RandomRange
					.ENDIF
 00000235  66| 29 86			sub [xyPosBogy + esi].x, ax
	   000000A8 R
					.IF [xyPosBogy + esi].x <= 16
 0000024A  66| FF 0D				dec livesNum
	   00000BE5 R
						.IF levelNum <= 0
 0000025B  BB 00000003					mov ebx, 3
 00000260  E9 FFFFFDC8					jmp CheckEbx
						.ENDIF
						.IF levelNum == 1
 0000026F  66| B8 0064					mov ax, 100
 00000273  E8 00000000 E				call RandomRange
 00000278  66| 05 0082					add ax, 130
						.ENDIF
						.IF levelNum == 2
 00000286  66| B8 005A					mov ax, 90
 0000028A  E8 00000000 E				call RandomRange
 0000028F  66| 05 0087					add ax, 135
						.ENDIF
						.IF levelNum == 3
 0000029D  66| B8 005A					mov ax, 90
 000002A1  E8 00000000 E				call RandomRange
 000002A6  66| 05 0082					add ax, 130
						.ENDIF
						.IF levelNum == 4
 000002B4  66| B8 0050					mov ax, 80
 000002B8  E8 00000000 E				call RandomRange
 000002BD  66| 83 C0 7D					add ax, 125
						.ENDIF
						.IF levelNum == 5
 000002CB  66| B8 0050					mov ax, 80
 000002CF  E8 00000000 E				call RandomRange
 000002D4  66| 83 C0 78					add ax, 120
						.ENDIF
 000002D8  66| 89 86				mov [xyPosBogy + esi].x, ax
	   000000A8 R
					.ENDIF
 000002DF  83 C6 04			add esi, 4
 000002E2  83 C2 02			add edx, 2
 000002E5  49				dec ecx
 000002E6  83 F9 00			cmp ecx, 0
 000002E9  0F 85 FFFFFED2		jne CheckBogyNeedToClear
					
					; 判斷子彈是否需要消失
 000002EF  B9 00000015			mov ecx, 21
 000002F4  BE 00000000			mov esi, 0
 000002F9  BF 00000000			mov edi, 0
 000002FE			CheckBulletNeedToClear:
					.IF [bulletIsWork + esi] == 1
						INVOKE bulletClear, [xyPosBullet + edx]
 00000313  83 82 0000002C R			add [xyPosBullet + edx], 6
	   06
						.IF edx >= 0
							.IF edx < 8
 00000324  66| A1						mov ax, [xyPosBogy + 0].x
	   000000A8 R
 0000032A  66| 83 E8 06						sub ax, 6
								.IF [xyPosBullet + edx].x >= ax
 00000337  66| FF 0D							dec bogysNum
	   00000BE7 R
									.IF bogysNum <= 0
 00000348  BB 00000003								mov ebx, 3
 0000034D  E9 FFFFFCDB								jmp CheckEbx
									.ENDIF

 00000352  66| B8 001E							mov ax, 30
 00000356  E8 00000000 E						call RandomRange
 0000035B  66| 05 00B4							add ax, 180
 0000035F  66| A3							mov [xyPosBogy + 0].x, ax
	   000000A8 R
								.ENDIF
							.ENDIF
						.ENDIF
					.ENDIF
 00000365  83 C6 02			add esi, 2
 00000368  83 C7 04			add edi, 4
 0000036B  49				dec ecx
 0000036C  83 F9 00			cmp ecx, 0
 0000036F  75 8D			jne CheckBulletNeedToClear


 00000371  E9 FFFFFCE9			jmp GameLoop

 00000376			ExitProgram:
					exit
 0000037D			main ENDP

				; 印開始畫面
 0000037D			printStartScene PROC
					LOCAL cursorInfo:CONSOLE_CURSOR_INFO
 00000383  C7 45 F8			mov cursorInfo.dwSize, 100
	   00000064
 0000038A  C7 45 FC			mov cursorInfo.bVisible, 0
	   00000000
					INVOKE SetConsoleCursorInfo,
						consoleHandle,
						ADDR cursorInfo

 000003A0  E8 00000000 E		call Clrscr

					; 印開始畫面的標題
 000003A5  66| C7 05			mov xyPos.x, 6
	   00000022 R
	   0006
 000003AE  66| C7 05			mov xyPos.y, 5
	   00000024 R
	   0005

 000003B7  B9 00000006			mov ecx, 6
 000003BC  BE 00000000			mov esi, 0
 000003C1			ShowStartStr:
 000003C1  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR startColor,
						108,
						xyPos,
						ADDR cells_Written
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [startStr + esi],
						108, 
						xyPos,
						ADDR cells_Written
 000003FE  83 C6 6C			add esi, 108
 00000401  66| FF 05			inc xyPos.y
	   00000024 R
 00000408  59				pop ecx
 00000409  E2 B6			loop ShowStartStr

					; 印選項
 0000040B			printOption:
 0000040B  66| 83 05			add xyPos.y, 7
	   00000024 R 07
 00000413  66| 83 05			add xyPos.x, 48
	   00000022 R 30
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR enterMsg,
						SIZEOF enterMsg, 
						xyPos,
						ADDR cells_Written

 00000438  66| 83 05			add xyPos.y, 2
	   00000024 R 02
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR leaveMsg,
						SIZEOF leaveMsg, 
						xyPos,
						ADDR cells_Written

					; 印歡迎坦克
 0000045D  B9 00000007			mov ecx, 7
 00000462  BE 00000000			mov esi, 0
 00000467  66| C7 05			mov xyPos.x, 20
	   00000022 R
	   0014
 00000470  66| C7 05			mov xyPos.y, 15
	   00000024 R
	   000F
 00000479			PrintStartTank:
 00000479  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR startTankColor,
						24,
						xyPos,
						ADDR cells_Written
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle, 
						ADDR [startTank + esi],
						24,
						xyPos,
						ADDR cells_Written
 000004B6  83 C6 18			add esi, 24
 000004B9  66| FF 05			inc xyPos.y
	   00000024 R
 000004C0  59				pop ecx
 000004C1  E2 B6			loop PrintStartTank

 000004C3  B9 00000005			mov ecx, 5
 000004C8  BE 00000000			mov esi, 0
 000004CD  66| C7 05			mov xyPos.x, 85
	   00000022 R
	   0055
 000004D6  66| C7 05			mov xyPos.y, 16
	   00000024 R
	   0010
 000004DF			PrintStartBogy:
 000004DF  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR startBogyColor,
						7,
						xyPos,
						ADDR cells_Written
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle, 
						ADDR [startBogy + esi],
						7,
						xyPos,
						ADDR cells_Written
 0000051C  83 C6 07			add esi, 7
 0000051F  66| FF 05			inc xyPos.y
	   00000024 R
 00000526  59				pop ecx
 00000527  E2 B6			loop PrintStartBogy

					; 判斷是否進入遊戲
 00000529			StartOrNot:
 00000529  E8 00000000 E		call ReadKey
					.IF ax == 1265h ; 按E進入Intro
 00000534  E8 00000000 E			call Clrscr
 00000539  66| C7 05				mov xyPos.x, 28
	   00000022 R
	   001C
 00000542  66| C7 05				mov xyPos.y, 7
	   00000024 R
	   0007
 0000054B  B9 00000011				mov ecx, 17
 00000550  BE 00000000				mov esi, 0
 00000555  EB 0F				jmp PrintIntro
					.ENDIF
					.IF ax == 266ch ; 按L離開
 0000055D  BB 00000004				mov ebx, 4
						ret
					.ENDIF
 00000564  EB C3			jmp StartOrNot

					; 印Intro
 00000566			PrintIntro:
 00000566  51				push ecx
					.IF xyPos.y == 8
						INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR gameIntroColor,
						65,
						xyPos,
						ADDR cells_Written
					.ENDIF
					.IF xyPos.y == 15
						INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR gameIntroColor,
						65,
						xyPos,
						ADDR cells_Written
					.ENDIF
					.IF xyPos.y == 20
						INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR gameIntroColor,
						65,
						xyPos,
						ADDR cells_Written
					.ENDIF
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameIntro + esi],
						65,
						xyPos,
						ADDR cells_Written
 000005FB  83 C6 41			add esi, 65
 000005FE  66| FF 05			inc xyPos.y
	   00000024 R
 00000605  59				pop ecx
 00000606  49				dec ecx
 00000607  83 F9 00			cmp ecx, 0
 0000060A  0F 85 FFFFFF56		jne PrintIntro

					; 判斷是是否按下空白建
 00000610			GameOrNot:
 00000610  E8 00000000 E		call ReadKey
					.IF ax == 3920h
 0000061B  E8 00000000 E			call Clrscr
 00000620  BB 00000001				mov ebx, 1
						ret
					.ENDIF
 00000627  EB E7			jmp GameOrNot
					ret
 0000062B			printStartScene ENDP

				; 印結束畫面
 0000062B			printEnd PROC
 0000062B  66| C7 05			mov xyPos.x, 40
	   00000022 R
	   0028
 00000634  66| C7 05			mov xyPos.y, 5
	   00000024 R
	   0005
 0000063D  B9 00000006			mov ecx, 6
 00000642  BE 00000000			mov esi, 0
					.IF bogysNum == 0
 00000651			printWin:
 00000651  51					push ecx
						INVOKE WriteConsoleOutputAttribute,
							consoleHandle,
							ADDR winColor,
							36,
							xyPos,
							ADDR cells_Written
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [winStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 0000068E  59					pop ecx
 0000068F  83 C6 24				add esi, 36
 00000692  66| FF 05				inc xyPos.y
	   00000024 R
 00000699  E2 B6				loop printWin
 0000069B  66| B8 000A				mov ax, 10
 0000069F  66| F7 25				mul livesNum
	   00000BE5 R
 000006A6  66| 01 05				add scoreNum, ax
	   00000BE3 R
					.ENDIF
					.IF livesNum == 0
 000006B7			printLose:
 000006B7  51					push ecx
						INVOKE WriteConsoleOutputAttribute,
							consoleHandle,
							ADDR loseColor,
							36,
							xyPos,
							ADDR cells_Written
						INVOKE WriteConsoleOutputCharacter,
							consoleHandle,
							ADDR [loseStr + esi],
							36,
							xyPos,
							ADDR cells_Written
 000006F4  59					pop ecx
 000006F5  83 C6 24				add esi, 36
 000006F8  66| FF 05				inc xyPos.y
	   00000024 R
 000006FF  E2 B6				loop printLose
					.ENDIF

 00000701  66| C7 05			mov xyPos.x, 32
	   00000022 R
	   0020
 0000070A  66| C7 05			mov xyPos.y, 15
	   00000024 R
	   000F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written

 00000730  66| 83 05			add xyPos.x, 7
	   00000022 R 07
					INVOKE printNum, scoreNum, numStr, xyPos

 00000753  66| 83 05			add xyPos.x, 15
	   00000022 R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written

 00000778  66| 83 05			add xyPos.x, 7
	   00000022 R 07
					INVOKE printNum, livesNum, numStr, xyPos

 0000079B  66| 83 05			add xyPos.x, 15
	   00000022 R 0F
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written

 000007C0  66| 83 05			add xyPos.x, 7
	   00000022 R 07
					INVOKE printNum, bogysNum, numStr, xyPos

 000007E3  66| 83 05			add xyPos.y, 3
	   00000024 R 03
 000007EB  66| C7 05			mov xyPos.x, 50
	   00000022 R
	   0032
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR restart,
						SIZEOF restart,
						xyPos,
						ADDR cells_Written

 00000811  66| 83 05			add xyPos.y, 2
	   00000024 R 02
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR leaveMsg,
						SIZEOF leaveMsg,
						xyPos,
						ADDR cells_Written

					.IF bogysNum == 0
 00000840  66| 83 05				add xyPos.y, 2
	   00000024 R 02
						.IF levelNum < 5
							INVOKE WriteConsoleOutputCharacter,
								consoleHandle,
								ADDR nextLevel,
								SIZEOF nextLevel,
								xyPos,
								ADDR cells_Written
						.ENDIF
						.IF levelNum == 5
 00000879  66| 83 2D					sub xyPos.x, 15
	   00000022 R 0F
							INVOKE WriteConsoleOutputAttribute,
								consoleHandle,
								ADDR finalColor,
								50,
								xyPos,
								ADDR cells_Written
							INVOKE WriteConsoleOutputCharacter,
								consoleHandle,
								ADDR finalMsg,
								SIZEOF finalMsg,
								xyPos,
								ADDR cells_Written
						.ENDIF
					.ENDIF
					
 000008BB			EndOptions:
 000008BB  E8 00000000 E		call ReadKey
					; restart
					.IF ax == 1372h
 000008C6  66| A1				mov ax, livesNumInLevel
	   00000BDF R
 000008CC  66| A3				mov livesNum, ax
	   00000BE5 R
 000008D2  66| A1				mov ax, scoreNumInLevel
	   00000BDD R
 000008D8  66| A3				mov scoreNum, ax
	   00000BE3 R
 000008DE  BB 00000001				mov ebx, 1
 000008E3  E8 00000000 E			call Clrscr
 000008E8  EB 35				jmp ExitEndScene
					.ENDIF
					; exit
					.IF ax == 266ch
 000008F0  BB 00000004				mov ebx, 4
 000008F5  EB 28				jmp ExitEndScene
					.ENDIF
					; next level
					.IF bogysNum == 0
						.IF ax == 316eh
 00000907  BB 00000001					mov ebx, 1
							.IF levelNum < 5
 00000916  66| FF 05						inc levelNum
	   00000BE1 R
							.ENDIF
 0000091D  EB 00					jmp ExitEndScene
						.ENDIF
					.ENDIF
 0000091F			ExitEndScene:
 0000091F  C3				ret
 00000920			printEnd ENDP

				; 印遊戲的框框
 00000920			printGameStage PROC
 00000920			printGameSceneTop:
 00000920  66| C7 05			mov xyPos.x, 5
	   00000022 R
	   0005
 00000929  66| C7 05			mov xyPos.y, 4
	   00000024 R
	   0004
					INVOKE WriteConsoleOutPutCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 0000094F  66| FF 05			inc xyPos.y
	   00000024 R
					
 00000956  B9 00000018			mov ecx, 24
 0000095B			printGameSceneMiddle:
 0000095B  51				push ecx
					INVOKE WriteConsoleOutPutCharacter,
						consoleHandle,
						ADDR gameBgM,
						110,
						xyPos,
						ADDR cells_Written
 00000979  66| FF 05			inc xyPos.y
	   00000024 R
 00000980  59				pop ecx
 00000981  E2 D8			loop printGameSceneMiddle
 00000983			PrintGameSceneButtom:
					INVOKE WriteConsoleOutPutCharacter,
						consoleHandle,
						ADDR gameBgTB,
						110,
						xyPos,
						ADDR cells_Written
 000009A0  66| FF 05			inc xyPos.y
	   00000024 R
 000009A7  C3				ret
 000009A8			printGameStage ENDP

				; printBar
 000009A8			printBar PROC
 000009A8  66| C7 05			mov xyPos.x, 5
	   00000022 R
	   0005
 000009B1  66| C7 05			mov xyPos.y, 2
	   00000024 R
	   0002
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR level,
						SIZEOF level,
						xyPos,
						ADDR cells_Written
 000009D7  66| C7 05			mov xyPos.x, 12
	   00000022 R
	   000C
					INVOKE printNum, levelNum, numStr, xyPos

 000009FB  66| C7 05			mov xyPos.x, 29
	   00000022 R
	   001D
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR state,
						SIZEOF state,
						xyPos,
						ADDR cells_Written

 00000A21  66| C7 05			mov xyPos.x, 36
	   00000022 R
	   0024
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR playing,
						SIZEOF playing,
						xyPos,
						ADDR cells_Written

 00000A47  66| C7 05			mov xyPos.x, 56
	   00000022 R
	   0038
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR score,
						SIZEOF score,
						xyPos,
						ADDR cells_Written
					
 00000A6D  66| C7 05			mov xyPos.x, 63
	   00000022 R
	   003F
					INVOKE printNum, scoreNum, numStr, xyPos

 00000A91  66| C7 05			mov xyPos.x, 80
	   00000022 R
	   0050
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR lives,
						SIZEOF lives,
						xyPos,
						ADDR cells_Written
					
 00000AB7  66| C7 05			mov xyPos.x, 87
	   00000022 R
	   0057
					INVOKE printNum, livesNum, numStr, xyPos

 00000ADB  66| C7 05			mov xyPos.x, 104
	   00000022 R
	   0068
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR bogys,
						SIZEOF bogys,
						xyPos,
						ADDR cells_Written
					
 00000B01  66| C7 05			mov xyPos.x, 111
	   00000022 R
	   006F
					INVOKE printNum, bogysNum, numStr, xyPos
 00000B25  C3				ret
 00000B26			printBar ENDP

				; 關卡初始化
 00000B26			initialLevel PROC
					; 紀錄進入關卡之前的 lives & score
 00000B26  66| A1			mov ax, scoreNum
	   00000BE3 R
 00000B2C  66| A3			mov scoreNumInLevel, ax
	   00000BDD R
 00000B32  66| A1			mov ax, livesNum
	   00000BE5 R
 00000B38  66| A3			mov livesNumInLevel, ax
	   00000BDF R
					; 初始化Bogy數量
 00000B3E  66| A1			mov ax, levelNum
	   00000BE1 R
 00000B44  66| BA 0004			mov dx, 4
 00000B48  66| F7 E2			mul dx
 00000B4B  66| A3			mov bogysNum, ax
	   00000BE7 R
					; 初始化坦克位置
 00000B51  66| C7 05			mov xyPosTank.y, 15
	   00000028 R
	   000F
					; 初始化子彈狀態
 00000B5A  B9 00000015			mov ecx, 21
 00000B5F  BE 00000000			mov esi, 0
 00000B64			SetBulletIsWorkN0:
 00000B64  66| C7 86			mov [bulletIsWork + esi], 0
	   00000080 R
	   0000
 00000B6D  83 C6 02			add esi, 2
 00000B70  E2 F2			loop SetBulletIsWorkN0
					; 初始化子彈位置
 00000B72  B9 00000015			mov ecx, 21
 00000B77  BE 00000000			mov esi, 0
 00000B7C			SetBulletPos:
 00000B7C  66| C7 86			mov [xyPosBullet + esi].x, 15
	   0000002C R
	   000F
 00000B85  83 C6 04			add esi, 4
 00000B88  E2 F2			loop SetBulletPos
					; 初始化Bogy位置
 00000B8A  B9 00000006			mov ecx, 6
 00000B8F  BE 00000000			mov esi, 0
 00000B94  BA 00000000			mov edx, 0
 00000B99			SetBogyPosNum:
					.IF levelNum == 1
 00000BA3  66| 8B 86				mov ax, [xPosBogyLevel1 + esi]
	   000000C0 R
 00000BAA  66| 89 82				mov [xyPosBogy + edx].x, ax
	   000000A8 R
					.ENDIF
					.IF levelNum == 2
 00000BBB  66| 8B 86				mov ax, [xPosBogyLevel2 + esi]
	   000000CC R
 00000BC2  66| 89 82				mov [xyPosBogy + edx].x, ax
	   000000A8 R
					.ENDIF
					.IF levelNum == 3
 00000BD3  66| 8B 86				mov ax, [xPosBogyLevel3 + esi]
	   000000D8 R
 00000BDA  66| 89 82				mov [xyPosBogy + edx].x, ax
	   000000A8 R
					.ENDIF
					.IF levelNum == 4
 00000BEB  66| 8B 86				mov ax, [xPosBogyLevel4 + esi]
	   000000E4 R
 00000BF2  66| 89 82				mov [xyPosBogy + edx].x, ax
	   000000A8 R
					.ENDIF
					.IF levelNum == 5
 00000C03  66| 8B 86				mov ax, [xPosBogyLevel5 + esi]
	   000000F0 R
 00000C0A  66| 89 82				mov [xyPosBogy + edx].x, ax
	   000000A8 R
					.ENDIF
 00000C11  83 C6 02			add esi, 2
 00000C14  83 C2 04			add edx, 4
 00000C17  E2 80			loop SetBogyPosNum
 00000C19  C3				ret
 00000C1A			initialLevel ENDP

				; 印綠色的線
 00000C1A			printGreenLine PROC, 
					xyPosInit:COORD

 00000C1D  66| C7 45 08			mov xyPosInit.x, 20
	   0014
 00000C23  66| C7 45 0A			mov xyPosInit.y, 5
	   0005
					
 00000C29  B9 00000018			mov ecx, 24
 00000C2E  BE 00000000			mov esi, 0
 00000C33			PrintLine:
 00000C33  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR greenColor,
						1,
						xyPosInit,
						ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR line,
						1,
						xyPosInit,
						ADDR cells_Written
 00000C68  66| FF 45 0A			inc xyPosInit.y
 00000C6C  59				pop ecx
 00000C6D  E2 C4			loop PrintLine
					ret
 00000C73			printGreenLine ENDP

				; 印BOGY
 00000C73			printBogy PROC,
					xyPosInit:COORD
 00000C76  B9 00000003			mov ecx, 3
 00000C7B  BE 00000000			mov esi, 0
 00000C80			BogyPrint:
 00000C80  51				push ecx
					.IF xyPosInit.x >15
						.IF xyPosInit.x <= 58
							INVOKE WriteConsoleOutputAttribute,
								consoleHandle,
								ADDR [gameBogyColor + 0],
								5,
								xyPosInit,
								ADDR cells_Written	
						.ENDIF
					.ENDIF
					.IF xyPosInit.x >58
						.IF xyPosInit.x <= 83
							INVOKE WriteConsoleOutputAttribute,
								consoleHandle,
								ADDR [gameBogyColor + 10],
								5,
								xyPosInit,
								ADDR cells_Written	
						.ENDIF
					.ENDIF
					.IF xyPosInit.x > 83
						INVOKE WriteConsoleOutputAttribute,
							consoleHandle,
							ADDR [gameBogyColor + 20],
							5,
							xyPosInit,
							ADDR cells_Written	
					.ENDIF
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameBogy + esi],
						5,
						xyPosInit,
						ADDR cells_Written
 00000D0E  83 C6 05			add esi, 5
 00000D11  66| FF 45 0A			inc xyPosInit.y
 00000D15  59				pop ecx
 00000D16  49				dec ecx
 00000D17  83 F9 00			cmp ecx, 0
 00000D1A  0F 85 FFFFFF60		jne BogyPrint
					ret
 00000D24			printBogy ENDP

				; 清空BOGY
 00000D24			bogyClear PROC,
					xyPosInit:COORD
 00000D27  B9 00000003			mov ecx, 3
 00000D2C  BE 00000000			mov esi, 0
 00000D31			removeBogy:
 00000D31  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearBogy + esi],
						5,
						xyPosInit,
						ADDR cells_Written
 00000D4E  83 C6 05			add esi, 5
 00000D51  66| FF 45 0A			inc xyPosInit.y
 00000D55  59				pop ecx
 00000D56  E2 D9			loop removeBogy
					ret
 00000D5C			bogyClear ENDP

				; 印坦克
 00000D5C			printTank PROC,
					xyPosInit:COORD
 00000D5F  B9 00000003			mov ecx, 3
 00000D64  BE 00000000			mov esi, 0
 00000D69			TankPrint:
 00000D69  51				push ecx
					INVOKE WriteConsoleOutputAttribute,
						consoleHandle,
						ADDR tankColor,
						8,
						xyPosInit,
						ADDR cells_Written
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [gameTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 00000DA0  83 C6 08			add esi, 8
 00000DA3  66| FF 45 0A			inc xyPosInit.y
 00000DA7  59				pop ecx
 00000DA8  E2 BF			loop TankPrint
					ret
 00000DAE			printTank ENDP

				; 清空坦克
 00000DAE			tankClear PROC,
					xyPosInit:COORD
 00000DB1  B9 00000003			mov ecx, 3
 00000DB6  BE 00000000			mov esi, 0
 00000DBB			removeTank:
 00000DBB  51				push ecx
					INVOKE WriteConsoleOutputCharacter,
						consoleHandle,
						ADDR [clearTank + esi],
						8,
						xyPosInit,
						ADDR cells_Written
 00000DD8  83 C6 08			add esi, 8
 00000DDB  66| FF 45 0A			inc xyPosInit.y
 00000DDF  59				pop ecx
 00000DE0  E2 D9			loop removeTank
					ret
 00000DE6			tankClear ENDP

				; 印子彈
 00000DE6			printBullet PROC, 
					xyPosInit:COORD

					INVOKE WriteConsoleOutputAttribute,
					consoleHandle,
					ADDR bulletColor,
					6,
					xyPosInit,
					ADDR cells_Written

					INVOKE WriteConsoleOutputCharacter,
					consoleHandle,
					ADDR bullet,
					6,
					xyPosInit,
					ADDR cells_Written
					ret
 00000E21			printBullet ENDP

				; 清空子彈
 00000E21			bulletClear PROC,
					xyPosInit:COORD

					INVOKE WriteConsoleOutputCharacter,
					consoleHandle,
					ADDR clearBullet,
					6,
					xyPosInit,
					ADDR cells_Written
					ret
 00000E42			bulletClear ENDP

				; 印數字出來
 00000E42			printNum PROC USES eax, 
					decNum:WORD,
					decStr:BYTE,
					xyPosInit:COORD

					INVOKE decToStr, decNum, decStr
					INVOKE WriteConsoleOutputCharacter, 
						consoleHandle,
						ADDR decStr,
						SIZEOF decStr,
						xyPosInit,
						ADDR cells_Written
					ret
 00000E74			printNum ENDP

				; 將十進位數字轉可以印出來的字串
 00000E74			decToStr PROC USES ecx edx eax,
					decNum:WORD,
					decStr:BYTE
					
 00000E7A  B9 00000004			mov ecx, 4 ; WORD 最高存4位數
 00000E7F  B2 0A			mov dl, 10 ; 除數
 00000E81  66| 8B 45 08			mov ax, decNum ; 被除數
 00000E85			change:
 00000E85  51				push ecx
 00000E86  F6 F2			div dl
 00000E88  80 C4 30			add ah, '0'
 00000E8B  49				dec ecx
 00000E8C  88 64 0D 0C			mov [decStr + ecx], ah ; 將算出來的數字放回decStr
 00000E90  66| 0F B6 C0			movzx ax, al; 商繼續除
 00000E94  59				pop ecx
 00000E95  E2 EE			loop change
					ret
 00000E9E			decToStr ENDP

				END main
Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/22/22 03:17:08
mian.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000F07 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000E9E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bogyClear  . . . . . . . . . . .	P Near	 00000D24 _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeBogy . . . . . . . . . .	L Near	 00000D31 _TEXT	
bulletClear  . . . . . . . . . .	P Near	 00000E21 _TEXT	Length= 00000021 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
decToStr . . . . . . . . . . . .	P Near	 00000E74 _TEXT	Length= 0000002A Public STDCALL
  decNum . . . . . . . . . . . .	Word	 bp + 00000008
  decStr . . . . . . . . . . . .	Byte	 bp + 0000000C
  change . . . . . . . . . . . .	L Near	 00000E85 _TEXT	
initialLevel . . . . . . . . . .	P Near	 00000B26 _TEXT	Length= 000000F4 Public STDCALL
  SetBulletIsWorkN0  . . . . . .	L Near	 00000B64 _TEXT	
  SetBulletPos . . . . . . . . .	L Near	 00000B7C _TEXT	
  SetBogyPosNum  . . . . . . . .	L Near	 00000B99 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000037D Public STDCALL
  WelcomeScene . . . . . . . . .	L Near	 00000028 _TEXT	
  CheckEbx . . . . . . . . . . .	L Near	 0000002D _TEXT	
  GameLoop . . . . . . . . . . .	L Near	 0000005F _TEXT	
  CheckBulletNeedToPrint . . . .	L Near	 00000089 _TEXT	
  CheckBogyNeedToPrint . . . . .	L Near	 000000B0 _TEXT	
  CheckKeyboard  . . . . . . . .	L Near	 000000CA _TEXT	
  ToPause  . . . . . . . . . . .	L Near	 00000104 _TEXT	
  BackToGame . . . . . . . . . .	L Near	 00000130 _TEXT	
  CheckBogyNeedToClear . . . . .	L Near	 000001C1 _TEXT	
  CheckBulletNeedToClear . . . .	L Near	 000002FE _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 00000376 _TEXT	
printBar . . . . . . . . . . . .	P Near	 000009A8 _TEXT	Length= 0000017E Public STDCALL
printBogy  . . . . . . . . . . .	P Near	 00000C73 _TEXT	Length= 000000B1 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  BogyPrint  . . . . . . . . . .	L Near	 00000C80 _TEXT	
printBullet  . . . . . . . . . .	P Near	 00000DE6 _TEXT	Length= 0000003B Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
printEnd . . . . . . . . . . . .	P Near	 0000062B _TEXT	Length= 000002F5 Public STDCALL
  printWin . . . . . . . . . . .	L Near	 00000651 _TEXT	
  printLose  . . . . . . . . . .	L Near	 000006B7 _TEXT	
  EndOptions . . . . . . . . . .	L Near	 000008BB _TEXT	
  ExitEndScene . . . . . . . . .	L Near	 0000091F _TEXT	
printGameStage . . . . . . . . .	P Near	 00000920 _TEXT	Length= 00000088 Public STDCALL
  printGameSceneTop  . . . . . .	L Near	 00000920 _TEXT	
  printGameSceneMiddle . . . . .	L Near	 0000095B _TEXT	
  PrintGameSceneButtom . . . . .	L Near	 00000983 _TEXT	
printGreenLine . . . . . . . . .	P Near	 00000C1A _TEXT	Length= 00000059 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  PrintLine  . . . . . . . . . .	L Near	 00000C33 _TEXT	
printNum . . . . . . . . . . . .	P Near	 00000E42 _TEXT	Length= 00000032 Public STDCALL
  decNum . . . . . . . . . . . .	Word	 bp + 00000008
  decStr . . . . . . . . . . . .	Byte	 bp + 0000000C
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000010
printStartScene  . . . . . . . .	P Near	 0000037D _TEXT	Length= 000002AE Public STDCALL
  cursorInfo . . . . . . . . . .	QWord	 bp - 00000008
  ShowStartStr . . . . . . . . .	L Near	 000003C1 _TEXT	
  printOption  . . . . . . . . .	L Near	 0000040B _TEXT	
  PrintStartTank . . . . . . . .	L Near	 00000479 _TEXT	
  PrintStartBogy . . . . . . . .	L Near	 000004DF _TEXT	
  StartOrNot . . . . . . . . . .	L Near	 00000529 _TEXT	
  PrintIntro . . . . . . . . . .	L Near	 00000566 _TEXT	
  GameOrNot  . . . . . . . . . .	L Near	 00000610 _TEXT	
printTank  . . . . . . . . . . .	P Near	 00000D5C _TEXT	Length= 00000052 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  TankPrint  . . . . . . . . . .	L Near	 00000D69 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
tankClear  . . . . . . . . . . .	P Near	 00000DAE _TEXT	Length= 00000038 Public STDCALL
  xyPosInit  . . . . . . . . . .	DWord	 bp + 00000008
  removeTank . . . . . . . . . .	L Near	 00000DBB _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bogysNum . . . . . . . . . . . .	Word	 00000BE7 _DATA	
bogys  . . . . . . . . . . . . .	Byte	 00000BC1 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bulletColor  . . . . . . . . . .	Word	 00000B91 _DATA	
bulletIsWork . . . . . . . . . .	Word	 00000080 _DATA	
bullet . . . . . . . . . . . . .	Byte	 00000B84 _DATA	
cells_Written  . . . . . . . . .	DWord	 00000004 _DATA	
clearBogy  . . . . . . . . . . .	Byte	 00000B61 _DATA	
clearBullet  . . . . . . . . . .	Byte	 00000B8B _DATA	
clearTank  . . . . . . . . . . .	Byte	 00000B3A _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000000 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterMsg . . . . . . . . . . . .	Byte	 00000A38 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
finalColor . . . . . . . . . . .	Word	 00000ABE _DATA	
finalMsg . . . . . . . . . . . .	Byte	 00000A8B _DATA	
gameBgM  . . . . . . . . . . . .	Byte	 00000C58 _DATA	
gameBgTB . . . . . . . . . . . .	Byte	 00000BE9 _DATA	
gameBogyColor  . . . . . . . . .	Word	 00000B66 _DATA	
gameBogy . . . . . . . . . . . .	Byte	 00000B52 _DATA	
gameIntroColor . . . . . . . . .	Word	 000009B6 _DATA	
gameIntro  . . . . . . . . . . .	Byte	 00000565 _DATA	
gameTank . . . . . . . . . . . .	Byte	 00000B22 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenColor . . . . . . . . . . .	Word	 00000B9F _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
leaveMsg . . . . . . . . . . . .	Byte	 00000A4B _DATA	
levelNum . . . . . . . . . . . .	Word	 00000BE1 _DATA	
level  . . . . . . . . . . . . .	Byte	 00000BA1 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 00000B9D _DATA	
livesNumInLevel  . . . . . . . .	Word	 00000BDF _DATA	
livesNum . . . . . . . . . . . .	Word	 00000BE5 _DATA	
lives  . . . . . . . . . . . . .	Byte	 00000BB9 _DATA	
loseColor  . . . . . . . . . . .	Word	 00000EBF _DATA	
loseStr  . . . . . . . . . . . .	Byte	 00000DE7 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
nextLevel  . . . . . . . . . . .	Byte	 00000A73 _DATA	
numStr . . . . . . . . . . . . .	Byte	 00000BC9 _DATA	
paused . . . . . . . . . . . . .	Byte	 00000BCD _DATA	
playing  . . . . . . . . . . . .	Byte	 00000BD5 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
restart  . . . . . . . . . . . .	Byte	 00000A5E _DATA	
scoreNumInLevel  . . . . . . . .	Word	 00000BDD _DATA	
scoreNum . . . . . . . . . . . .	Word	 00000BE3 _DATA	
score  . . . . . . . . . . . . .	Byte	 00000BB1 _DATA	
startBogyColor . . . . . . . . .	Word	 00000557 _DATA	
startBogy  . . . . . . . . . . .	Byte	 00000534 _DATA	
startColor . . . . . . . . . . .	Word	 00000384 _DATA	
startStr . . . . . . . . . . . .	Byte	 000000FC _DATA	
startTankColor . . . . . . . . .	Word	 00000504 _DATA	
startTank  . . . . . . . . . . .	Byte	 0000045C _DATA	
state  . . . . . . . . . . . . .	Byte	 00000BA9 _DATA	
tankColor  . . . . . . . . . . .	Word	 00000B42 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winColor . . . . . . . . . . . .	Word	 00000D9F _DATA	
winStr . . . . . . . . . . . . .	Byte	 00000CC7 _DATA	
windowBound  . . . . . . . . . .	SMALL_RECT  0000001A _DATA	
windowTitleStr . . . . . . . . .	Byte	 00000008 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPos15 . . . . . . . . . . . . .	Word	 0000002A _DATA	
xPosBogyLevel1 . . . . . . . . .	Word	 000000C0 _DATA	
xPosBogyLevel2 . . . . . . . . .	Word	 000000CC _DATA	
xPosBogyLevel3 . . . . . . . . .	Word	 000000D8 _DATA	
xPosBogyLevel4 . . . . . . . . .	Word	 000000E4 _DATA	
xPosBogyLevel5 . . . . . . . . .	Word	 000000F0 _DATA	
xyPosBogy  . . . . . . . . . . .	COORD	 000000A8 _DATA	
xyPosBullet  . . . . . . . . . .	COORD	 0000002C _DATA	
xyPosTank  . . . . . . . . . . .	COORD	 00000026 _DATA	
xyPos  . . . . . . . . . . . . .	COORD	 00000022 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
